{"mappings":"iiBAAAA,OAAOC,OAAU,WACbC,SAASC,cAAc,iBAAiBC,MAAMC,QAAU,M,wBCD5D,IAAAC,EAAAC,EAAA,S,oEAcW,EAAAC,EAAAC,cAAaC,EAAAC,c,sBCbV,IAARC,EAAMV,SAASC,cAAc,eAIf,QAFCU,aAAaC,QAAQ,UAIhBZ,SAAfa,KAAKC,UAAUC,IAAI,cAILL,EAArBM,iBAAiB,SAAS,WAEGhB,SAAtBa,KAAKC,UAAUG,OAAO,cAEZ,IAAfC,EAAQ,QAERlB,SAASa,KAAKC,UAAUK,SAAS,gBAEZD,EAAf,QAGVP,aAAaS,QAAQ,QAASF,E,2DCtBhCd,EAAAC,EAAA,S,aAAA,I,oDAKMgB,EAAarB,SAASC,cAAc,iBACpCqB,EAAYtB,SAASC,cAAc,kB,SAe1BsB,I,OAAAA,EAAfC,EAAApB,EAAA,CAAAoB,EAAAC,GAAAC,MAAA,SAAAC,EAA6BC,G,IAErBC,EACAC,EAMcC,E,qEARlBH,EAAMI,iBACFH,EAAO,EAEY,MADnBC,EAAcR,EAAUW,MAAMC,QACT,C,wCACVC,EAAAC,OAAOC,QAAQ,iCAAkC,CAACC,QAAS,IAAMC,SAAU,aAAcC,MAAO,IAAKC,oBAAoB,K,wBAG5H,EAAAC,EAAAC,mB,SACmBC,EAAAC,QAAIC,gBAAgB,GAAQC,OAALlB,GAAQ,GAAekB,OAAZjB,I,UAC1B,KADrBC,EAAIiB,EAAAC,MACDC,cAAmB,C,uBACxB5B,EAAUW,MAAQ,IAClB,EAAAS,EAAAS,yB,kBACOhB,EAAAC,OAAOC,QAAQ,iEAAkE,CAACC,QAAS,IAAMC,SAAU,aAAcC,MAAO,IAAKC,oBAAoB,K,QAEpKN,EAAAC,OAAOgB,KAAK,+BAAgC,CAACd,QAAS,IAAMC,SAAU,aAAcC,MAAO,IAAKC,oBAAoB,KACpH,EAAAY,EAAAC,gBAAe,CACXzB,OACA0B,aAAcxB,EAAKyB,QAAQC,OAC3BC,WAAY3B,EAAKmB,cACjBnB,KAAM,SACN4B,MAAO,GAAeZ,OAAZjB,GACV8B,WAAW,IAEbtC,EAAUW,MAAQ,IAClB,EAAAS,EAAAS,yB,kDAGFU,QAAQC,IAAGd,EAAAe,I,2DA5BCC,MAAAC,KAAAC,U,CAb5B7C,EAAWL,iBAAiB,U,SAaCY,G,OAAdL,EAAayC,MAAAC,KAAAC,U,IARrBlE,SAASmE,gBAAgBC,aAAe,MACvC9C,EAAU+C,aAAa,YAAa,IACjCrE,SAASmE,gBAAgBC,aAAe,MACvC9C,EAAU+C,aAAa,YAAa,I","sources":["src/js/loaderGIF-home.js","src/js/firebase/dataBase.js","src/js/themization.js","src/js/search.js"],"sourcesContent":["window.onload = (function() {\n    document.querySelector('#loading-home').style.display = 'none';\n  });\n \n","import {\n  setDoc,\n  getDoc,\n  doc,\n  updateDoc,\n  arrayUnion,\n  arrayRemove,\n} from 'firebase/firestore';\nimport { getFirestore } from 'firebase/firestore';\n\nimport { filmotecaApp } from './firebaseAuth';\nimport { auth } from './firebaseAuth';\n\n// Initialize Cloud Firestore and get a reference to the service\nconst db = getFirestore(filmotecaApp);\n\nconst WATCHED = 'watched';\nconst QUEUE = 'queue';\n\n// ----------------------------------- ADD TO WATCHED---------------------\n\nexport async function addToWatchedListFire(filmId) {\n  try {\n    const filmWatchedList = await getDoc(\n      doc(db, auth.currentUser.uid, WATCHED)\n    );\n    if (filmWatchedList.exists()) {\n      await updateDoc(doc(db, auth.currentUser.uid, WATCHED), {\n        filmsId: arrayUnion(filmId),\n      });\n      // --------------------------- DELETE FROM WATCHED\n      if (filmWatchedList.data().filmsId.includes(filmId)) {\n        await updateDoc(doc(db, auth.currentUser.uid, WATCHED), {\n          filmsId: arrayRemove(filmId),\n        });\n      }\n    }\n    // -------------------------- CREATE WATCHED ARRAY ------------------\n    else {\n      const createFilmList = await setDoc(\n        doc(db, auth.currentUser.uid, WATCHED),\n        {\n          filmsId: arrayUnion(filmId),\n        }\n      );\n    }\n  } catch (error) {\n    console.log('error: ', error);\n  }\n  // --- ЭТО ПРОВЕРКА ЧТОБ ВИДЕТЬ В КОНСОЛИ ЧТО ФАЙЛ УШЕЛ. УДАЛИТЬ ПОЗЖЕ -------\n  try {\n    const watchedListControl = await getDoc(\n      doc(db, auth.currentUser.uid, WATCHED)\n    );\n    console.log(\n      'ЗАПРОС УШЕЛ. arrayWatched: ',\n      watchedListControl.data().filmsId\n    );\n  } catch (error) {\n    console.log('error: ', error.code, error.message);\n  }\n}\n\n// ----------------------------- GET WATCHED ----------------\n\nexport async function getWatchedListFire() {\n  try {\n    const watchedList = await getDoc(doc(db, auth.currentUser.uid, WATCHED));\n    const watchedArr = await watchedList.data().filmsId;\n    // console.log('watchedArr: ', watchedArr);\n    return watchedArr;\n  } catch (error) {\n    console.log('error: ', error.code, error.message);\n  }\n}\n\n// ---------------------------------------------------------------------\n// ----------------------------------- ADD TO QUEUE---------------------\n\nexport async function addToQueueListFire(filmId) {\n  try {\n    const filmQueueList = await getDoc(doc(db, auth.currentUser.uid, QUEUE));\n    if (filmQueueList.exists()) {\n      await updateDoc(doc(db, auth.currentUser.uid, QUEUE), {\n        filmsId: arrayUnion(filmId),\n      });\n      // --------------------------- DELETE FROM QUEUE\n      if (filmQueueList.data().filmsId.includes(filmId)) {\n        await updateDoc(doc(db, auth.currentUser.uid, QUEUE), {\n          filmsId: arrayRemove(filmId),\n        });\n      }\n    }\n    // -------------------------- CREATE QUEUE ARRAY ------------------\n    else {\n      const createFilmList = await setDoc(\n        doc(db, auth.currentUser.uid, QUEUE),\n        {\n          filmsId: arrayUnion(filmId),\n        }\n      );\n    }\n  } catch (error) {\n    console.log('error: ', error);\n  }\n  // --- ЭТО ПРОВЕРКА ЧТОБ ВИДЕТЬ В КОНСОЛИ ЧТО ФАЙЛ УШЕЛ. УДАЛИТЬ ПОЗЖЕ -------\n  try {\n    const queueListControl = await getDoc(doc(db, auth.currentUser.uid, QUEUE));\n    console.log('ЗАПРОС УШЕЛ. arrayQueue: ', queueListControl.data().filmsId);\n  } catch (error) {\n    console.log('error: ', error.code, error.message);\n  }\n}\n\n// ----------------------------- GET QUEUE ----------------\n\nexport async function getQueueListFire() {\n  try {\n    const queueList = await getDoc(doc(db, auth.currentUser.uid, QUEUE));\n    const queueArr = await queueList.data().filmsId;\n    // console.log('queueArr: ', queueArr);\n    return queueArr;\n  } catch (error) {\n    console.log('error: ', error.code, error.message);\n  }\n}\n\n// --------------------------------------------------------------------\n// ---- ПРИ ЛЮБЫХ ДЕЙСТВИЯХ НУЖНО ЗАРЕГИСТРИРОВАТЬСЯ ИЛИ ВОЙТИ -------\n\n// -------------------- КОД ДЛЯ ДОБАВЛЕНИЯ В БАЗУ ---------------------\n\n// -----ВКЛЮЧИТЬ --------- В modalBtn.js ОТКЛЮЧИТЬ КНОПКИ И СЛУШАТЕЛИ НА НИХ-----------\n\n// const addToWatchedListBtn = document.querySelector('.add-btn__watched');\n// const addToQueueListBtn = document.querySelector('.add-btn__queue');\n\n// ---------- КНОПКИ ПРИ ПЕРВОМ КЛИКЕ ДОБАВЛЯЮТ ПРИ ВТОРОМ УДАЛЯЮТ ---------------\n\n// addToWatchedListBtn.addEventListener('click', e => {\n//   const moveId = Number(e.currentTarget.id);\n//   addToWatchedListFire(moveId);\n// });\n\n// addToQueueListBtn.addEventListener('click', e => {\n//   const moveId = Number(e.currentTarget.id);\n//   addToQueueListFire(moveId);\n// });\n\n// -------------- ПОЛУЧЕНИЕ МАССИВОВ ------------------\n// ---- ДЛЯ ПРОВЕРКИ СОЗДАЙ КНОПКИ С КЛАССАМИ КАК ВНИЗУ-----\n\n// const showWatchedListFireBtn = document.querySelector('.obj-btn1');\n// const showQueueListFireBtn = document.querySelector('.obj-btn2');\n\n// showWatchedListFireBtn.addEventListener('click', async () => {\n//   const watchedArray = await getWatchedListFire();\n//   console.log('watchedArray: ', watchedArray);\n// });\n\n// showQueueListFireBtn.addEventListener('click', async () => {\n//   const queueArray = await getQueueListFire();\n//   console.log('queueArray: ', queueArray);\n// });\n","// Выбираем кнопку\nconst btn = document.querySelector(\".btn-toggle\");\n// Выбираем настройки темы из localStorage\nconst currentTheme = localStorage.getItem(\"theme\");\n// Если текущая тема в localStorage равна \"dark\"…\nif (currentTheme == \"dark\") {\n  // …тогда мы используем класс .dark-theme\n  document.body.classList.add(\"dark-theme\");\n}\n\n// Отслеживаем щелчок по кнопке\nbtn.addEventListener(\"click\", function() {\n  // Переключаем класс .dark-theme при каждом щелчке\n  document.body.classList.toggle(\"dark-theme\");\n  // Допустим, тема светлая\n  let theme = \"light\";\n  // Если <body> содержит класс .dark-theme…\n  if (document.body.classList.contains(\"dark-theme\")) {\n    // …тогда делаем тему тёмной\n    theme = \"dark\";\n  }\n  // После чего сохраняем выбор в localStorage\n  localStorage.setItem(\"theme\", theme);\n});","import { Notify } from \"notiflix\";\nimport API from \"./apiService/movieAPI\";\nimport { initPagination } from \"./pagination-try\";\nimport { notiflixLoading, notiflixLoadingRemove } from './loading';\n\nconst submitForm = document.querySelector('.header__form');\nconst inputArea = document.querySelector('.header__input');\n\nsubmitForm.addEventListener('submit', consoleSearch);\n\ninputСontrol();\n\nfunction inputСontrol() {\n    if(document.documentElement.clientWidth >= 768) {\n        inputArea.setAttribute('maxlength', 40);\n        if(document.documentElement.clientWidth >= 1280) {\n            inputArea.setAttribute('maxlength', 47);\n        };\n    };\n};\n\nasync function consoleSearch(event) {\n    event.preventDefault();\n    let page = 1;\n    let searchQuery = inputArea.value.trim();\n        if(searchQuery === \"\") {\n            return Notify.failure(\"Please enter name of the film.\", {timeout: 5000, position: \"center-top\", width: 200, showOnlyTheLastOne: true});\n        } \n            try { \n                notiflixLoading();\n                const data = await API.getSearchMovies(`${page}`, `${searchQuery}`);\n                if (data.total_results === 0) {\n                    inputArea.value = \"\";\n                    notiflixLoadingRemove();\n                    return Notify.failure(\"Sorry, but there is no films with this name. Please try again.\", {timeout: 5000, position: \"center-top\", width: 200, showOnlyTheLastOne: true});\n                }\n                Notify.info('Your request is successfull.', {timeout: 5000, position: \"center-top\", width: 200, showOnlyTheLastOne: true});\n                initPagination({\n                    page,\n                    itemsPerPage: data.results.length,\n                    totalItems: data.total_results,\n                    data: 'search',\n                    query: `${searchQuery}`,\n                    firstTime: true,\n                  });\n                  inputArea.value = \"\";\n                  notiflixLoadingRemove();\n            }\n            catch(error) {\n                console.log(error);\n            };\n};\n"],"names":["window","onload","document","querySelector","style","display","$bpxeT","parcelRequire","$88RRX","getFirestore","$eH1tb","filmotecaApp","$d733e1f6bc85aa7d$var$btn","localStorage","getItem","body","classList","add","addEventListener","toggle","theme","contains","setItem","$d35904b1c7f1c41e$var$submitForm","$d35904b1c7f1c41e$var$inputArea","$d35904b1c7f1c41e$var$_consoleSearch","$parcel$interopDefault","$2TvXO","mark","_callee","event","page","searchQuery","data","preventDefault","value","trim","$iU1Pc","Notify","failure","timeout","position","width","showOnlyTheLastOne","$9OvHE","notiflixLoading","$1bHFN","default","getSearchMovies","concat","_ctx","sent","total_results","notiflixLoadingRemove","info","$bhg5s","initPagination","itemsPerPage","results","length","totalItems","query","firstTime","console","log","t0","apply","this","arguments","documentElement","clientWidth","setAttribute"],"version":3,"file":"index.d4406ebe.js.map"}